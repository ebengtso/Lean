using QuantConnect.Algorithm.Framework.Alphas;

namespace QuantConnect
{
    /// <summary>
    /// Contains alpha population run time statistics
    /// </summary>
    public class AlphaRuntimeStatistics
    {
        /// <summary>
        /// Gets the mean scores for the entire population of alphas
        /// </summary>
        public AlphaScore MeanPopulationScore { get; } = new AlphaScore();

        /// <summary>
        /// Gets the 100 alpha ema of alpha scores
        /// </summary>
        public AlphaScore RollingAveragedPopulationScore { get; } = new AlphaScore();

        /// <summary>
        /// The ratio of <see cref="AlphaDirection.Up"/> over <see cref="AlphaDirection.Down"/>
        /// </summary>
        public decimal LongShortRatio;

        /// <summary>
        /// The total estimated value of trading all alphas
        /// </summary>
        public decimal TotalEstimatedAlphaValue;

        /// <summary>
        /// The total number of alpha signals generated by the algorithm
        /// </summary>
        public long TotalAlphasGenerated;

        /// <summary>
        /// Gets the mean estimated alpha value
        /// </summary>
        public decimal MeanPopulationEstimatedAlphaValue => TotalAlphasGenerated > 0 ? TotalEstimatedAlphaValue / TotalAlphasGenerated : 0;
    }
}